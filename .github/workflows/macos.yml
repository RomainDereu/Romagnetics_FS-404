name: macOS test build artifact

on:
  # automatic: runs right after the build workflow completes
  workflow_run:
    workflows: ["macOS Qt build (unsigned)"]
    types: [completed]
  # manual: you can also run it and optionally pass a run_id
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID of a 'macOS Qt build (unsigned)' workflow to fetch artifacts from (optional)"
        required: false

permissions:
  actions: read
  contents: read

jobs:
  test:
    # if triggered by workflow_run, only proceed when the build succeeded
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-14

    steps:
      - name: Pick source run ID
        id: pick
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.run_id }}" ]; then
            echo "rid=${{ inputs.run_id }}" >> $GITHUB_OUTPUT
            echo "Using manual run_id: ${{ inputs.run_id }}"
          else
            echo "rid=${{ github.event.workflow_run.id }}" >> $GITHUB_OUTPUT
            echo "Using triggering run_id: ${{ github.event.workflow_run.id }}"
          fi

      - name: Download artifacts from the build run
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ github.token }}
          run-id: ${{ steps.pick.outputs.rid }}
          path: artifacts
          pattern: "*unsigned-macOS*"
          merge-multiple: true

      - name: List artifacts (debug)
        run: |
          echo "Artifacts from run ${{ steps.pick.outputs.rid }}"
          ls -R artifacts || true

      - name: Extract ZIP if present
        run: |
          ZIP=$(find artifacts -name "*.zip" | head -n1 || true)
          if [ -n "$ZIP" ]; then
            mkdir -p extracted
            ditto -x -k "$ZIP" extracted
            echo "Extracted ZIP â†’ ./extracted"
          else
            echo "No ZIP found; will try DMG or raw .app"
          fi

      - name: Mount DMG / select .app / copy to /tmp (writable)
        id: select
        run: |
          set -euo pipefail
          LOG=runlog.txt
          TMP="/tmp/app_under_test"
          rm -rf "$TMP"; mkdir -p "$TMP"

          APP=""
          VOL=""

          # 1) prefer .app from extracted ZIP
          APP=$(find extracted -type d -name "*.app" | head -n1 || true)

          # 2) else mount DMG and copy out the .app
          if [ -z "$APP" ]; then
            DMG=$(find artifacts -name "*.dmg" | head -n1 || true)
            if [ -n "$DMG" ]; then
              echo "DMG=$DMG" | tee -a "$LOG"
              BEFORE="$(ls /Volumes || true)"
              hdiutil attach -nobrowse "$DMG" >>"$LOG" 2>&1 || true
              AFTER="$(ls /Volumes || true)"
              VOL="$(comm -13 <(echo "$BEFORE"|sort) <(echo "$AFTER"|sort) | head -n1)"
              if [ -n "$VOL" ]; then
                echo "Mounted /Volumes/$VOL" | tee -a "$LOG"
                APP_ON_DMG="$(find "/Volumes/$VOL" -maxdepth 1 -type d -name "*.app" | head -n1 || true)"
                if [ -n "$APP_ON_DMG" ]; then
                  ditto "$APP_ON_DMG" "$TMP/$(basename "$APP_ON_DMG")" 2>&1 | tee -a "$LOG"
                  APP="$TMP/$(basename "$APP_ON_DMG")"
                fi
              fi
            fi
          fi

          # 3) else raw .app in artifacts
          if [ -z "$APP" ]; then
            RAW_APP=$(find artifacts -type d -name "*.app" | head -n1 || true)
            if [ -n "$RAW_APP" ]; then
              ditto "$RAW_APP" "$TMP/$(basename "$RAW_APP")" 2>&1 | tee -a "$LOG"
              APP="$TMP/$(basename "$RAW_APP")"
            fi
          fi

          [ -z "$APP" ] && echo "No .app found in artifact" | tee -a "$LOG" && exit 1

          echo "APP=$APP"        | tee -a "$LOG"
          echo "VOL=${VOL:-}"    | tee -a "$LOG"
          echo "app=$APP" >> $GITHUB_OUTPUT
          echo "vol=${VOL:-}" >> $GITHUB_OUTPUT

      - name: Run headless with timeouts + diagnostics
        run: |
          set -euo pipefail
          LOG=runlog.txt
          APP="${{ steps.select.outputs.app }}"
          VOL="${{ steps.select.outputs.vol }}"
          EXE=$(defaults read "$APP/Contents/Info" CFBundleExecutable 2>/dev/null || basename "$APP" .app)
          BIN="$APP/Contents/MacOS/$EXE"

          # attributes on writable copy
          xattr -dr com.apple.quarantine "$APP" 2>&1 | tee -a "$LOG" || true
          chmod +x "$BIN" 2>&1 | tee -a "$LOG" || true

          echo "---- otool -L ----" | tee -a "$LOG"
          otool -L "$BIN" 2>&1 | tee -a "$LOG" || true

          echo "---- codesign -dv ----" | tee -a "$LOG"
          codesign -dv --verbose=4 "$APP" 2>&1 | tee -a "$LOG" || true

          export QT_QPA_PLATFORM=offscreen
          export QT_DEBUG_PLUGINS=1
          export QT_LOGGING_RULES="qt.serialport.*=true"

          echo "---- $EXE --help (15s timeout) ----" | tee -a "$LOG"
          python3 -c 'import subprocess,threading; p=subprocess.Popen(["'"$BIN"'","--help"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True); t=threading.Timer(15,p.kill); t.start(); out=p.communicate()[0]; print(out or "");' 2>&1 | tee -a "$LOG"

          echo "---- $EXE (headless, 20s timeout) ----" | tee -a "$LOG"
          python3 -c 'import subprocess,threading,time; start=time.time(); p=subprocess.Popen(["'"$BIN"'"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True); t=threading.Timer(20,p.kill); t.start(); out=p.communicate()[0]; print(out or ""); print("TIMEOUT: app did not exit in 20s") if time.time()-start>=20 else None' 2>&1 | tee -a "$LOG"

          # detach any mounted DMG
          if [ -n "$VOL" ]; then
            hdiutil detach "/Volumes/$VOL" >>"$LOG" 2>&1 || true
          fi

      - name: Upload run log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macOS-headless-run-log
          path: runlog.txt
