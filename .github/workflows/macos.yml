name: macOS Qt build + test (unsigned)

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-14
    env:
      APP_NAME: "Romagnetics FS-404 Companion"
      APP_SUBDIR: "03_Computer Program/src"
      BUILD_TYPE: Release
      QT_VERSION: "6.8.3"

    steps:
      - uses: actions/checkout@v4

      - name: Install Qt (+ SerialPort)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          target: desktop
          modules: qtserialport
          cache: true

      - name: Configure (prefer qt-cmake)
        run: |
          set -eo pipefail
          if command -v qt-cmake >/dev/null 2>&1; then
            qt-cmake -S "${{ env.APP_SUBDIR }}" -B build \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0
          else
            cmake -S "${{ env.APP_SUBDIR }}" -B build \
              -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
              -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" \
              -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0
          fi

      - name: Build
        run: cmake --build build --config $BUILD_TYPE --parallel

      - name: Locate .app
        id: locate
        run: |
          set -eo pipefail
          APP_PATH=$(find build -type d -name "*.app" | head -n 1)
          [ -z "$APP_PATH" ] && echo "No .app found" && exit 1
          echo "path=$APP_PATH" >> $GITHUB_OUTPUT
          echo "Found: $APP_PATH"

      # Ensure 'offscreen' platform plugin is inside the app before packaging
      - name: Ensure offscreen platform plugin is present
        run: |
          set -eo pipefail
          APP_DIR="${{ steps.locate.outputs.path }}"
          DEST="$APP_DIR/Contents/PlugIns/platforms"
          mkdir -p "$DEST"
          PLUGDIR=""
          if command -v qtpaths >/dev/null 2>&1; then
            PLUGDIR="$(qtpaths --plugin-dir || true)"
          elif command -v qmake >/dev/null 2>&1; then
            PLUGDIR="$(qmake -query QT_INSTALL_PLUGINS || true)"
          fi
          PLUG=""
          [ -n "$PLUGDIR" ] && PLUG="$PLUGDIR/platforms/libqoffscreen.dylib"
          if [ ! -f "${PLUG:-/nonexistent}" ]; then
            PLUG="$(find "$RUNNER_TEMP" "$GITHUB_WORKSPACE/Qt" -maxdepth 6 -name 'libqoffscreen.dylib' 2>/dev/null | head -n1 || true)"
          fi
          if [ -n "$PLUG" ] && [ -f "$PLUG" ]; then
            cp -fv "$PLUG" "$DEST/"
            echo "Copied offscreen plugin from: $PLUG"
          else
            echo "WARNING: libqoffscreen.dylib not found; tests may rely on cocoa."
          fi
          ls -la "$DEST" || true

      - name: Bundle (macdeployqt, no signing)
        run: |
          set -eo pipefail
          macdeployqt "${{ steps.locate.outputs.path }}" -verbose=3 -qmldir="${{ env.APP_SUBDIR }}" -dmg

      - name: Zip the .app
        run: |
          ditto -c -k --sequesterRsrc --keepParent \
            "${{ steps.locate.outputs.path }}" "${{ env.APP_NAME }}.zip"

      - name: Upload artifacts (DMG + ZIP)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-unsigned-macOS
          path: |
            *.dmg
            build/*.dmg
            *.zip
          if-no-files-found: warn
          retention-days: 7

  test_zip:
    # Run only after the build has completed successfully
    needs: build
    runs-on: macos-14

    steps:
      - name: Download artifacts from previous job
        uses: actions/download-artifact@v4
        with:
          name: Romagnetics FS-404 Companion-unsigned-macOS
          path: artifacts

      - name: List artifacts (debug)
        run: |
          echo "Downloaded artifact contents:"
          ls -R artifacts || true

      - name: Extract ZIP
        id: unzip
        run: |
          set -euo pipefail
          ZIP=$(find artifacts -name "*.zip" | head -n1 || true)
          [ -z "$ZIP" ] && echo "No ZIP found in artifacts" && exit 1
          mkdir -p extracted
          ditto -x -k "$ZIP" extracted
          APP=$(find extracted -type d -name "*.app" | head -n1 || true)
          [ -z "$APP" ] && echo "No .app found after unzip" && exit 1
          echo "app=$APP" >> $GITHUB_OUTPUT
          echo "Using app: $APP"

      # (Safety) ensure offscreen plugin present after unzip; copy if missing
      - name: Ensure offscreen plugin is present (post-unzip)
        run: |
          set -euo pipefail
          APP="${{ steps.unzip.outputs.app }}"
          DEST="$APP/Contents/PlugIns/platforms"
          mkdir -p "$DEST"
          if [ ! -f "$DEST/libqoffscreen.dylib" ]; then
            PLUGDIR=""
            if command -v qtpaths >/dev/null 2>&1; then
              PLUGDIR="$(qtpaths --plugin-dir || true)"
            elif command -v qmake >/dev/null 2>&1; then
              PLUGDIR="$(qmake -query QT_INSTALL_PLUGINS || true)"
            fi
            PLUG=""
            [ -n "$PLUGDIR" ] && PLUG="$PLUGDIR/platforms/libqoffscreen.dylib"
            if [ ! -f "${PLUG:-/nonexistent}" ]; then
              PLUG="$(find "$RUNNER_TEMP" "$GITHUB_WORKSPACE/Qt" -maxdepth 6 -name 'libqoffscreen.dylib' 2>/dev/null | head -n1 || true)"
            fi
            if [ -n "$PLUG" ] && [ -f "$PLUG" ]; then
              cp -fv "$PLUG" "$DEST/"
              echo "Copied offscreen plugin from: $PLUG"
            else
              echo "WARNING: libqoffscreen.dylib not found; proceeding without it."
            fi
          fi

      - name: Headless checks (timeouts) + diagnostics
        run: |
          set -euo pipefail
          LOG=runlog.txt
          APP="${{ steps.unzip.outputs.app }}"
          EXE=$(defaults read "$APP/Contents/Info" CFBundleExecutable 2>/dev/null || basename "$APP" .app)
          BIN="$APP/Contents/MacOS/$EXE"
          xattr -dr com.apple.quarantine "$APP" 2>&1 | tee -a "$LOG" || true
          chmod +x "$BIN" 2>&1 | tee -a "$LOG" || true

          echo "---- otool -L ----" | tee "$LOG"
          otool -L "$BIN" 2>&1 | tee -a "$LOG" || true

          echo "---- codesign -dv ----" | tee -a "$LOG"
          codesign -dv --verbose=4 "$APP" 2>&1 | tee -a "$LOG" || true

          export QT_QPA_PLATFORM=offscreen
          export QT_DEBUG_PLUGINS=1
          export QT_LOGGING_RULES="qt.serialport.*=true"

          echo "---- $EXE --help (15s timeout) ----" | tee -a "$LOG"
          python3 -c 'import subprocess,threading; p=subprocess.Popen(["'"$BIN"'","--help"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True); t=threading.Timer(15,p.kill); t.start(); out=p.communicate()[0]; print(out or "");' 2>&1 | tee -a "$LOG"

          echo "---- $EXE (headless, 20s timeout) ----" | tee -a "$LOG"
          python3 -c 'import subprocess,threading,time; start=time.time(); p=subprocess.Popen(["'"$BIN"'"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True); t=threading.Timer(20,p.kill); t.start(); out=p.communicate()[0]; print(out or ""); print("TIMEOUT: app did not exit in 20s") if time.time()-start>=20 else None' 2>&1 | tee -a "$LOG"

      - name: Upload run log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macOS-headless-run-log
          path: runlog.txt
