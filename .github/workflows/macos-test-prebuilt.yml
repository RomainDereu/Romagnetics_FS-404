name: macOS test prebuilt .app

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["macOS Qt build (unsigned)"]
    types: [completed]

permissions:
  actions: read
  contents: read

jobs:
  test-prebuilt:
    # If triggered by workflow_run, only proceed when the build succeeded
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: macos-14
    env:
      # Update this if you keep a committed .app at a fixed location:
      APP_DIR: "03_Computer Program/Mac_executable/FS-404.app"

    steps:
      # Fetch LFS too, in case the .app was added via Git LFS
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Show repo layout (debug)
        run: |
          pwd
          ls -la
          ls -la "03_Computer Program" || true
          ls -la "03_Computer Program/Mac_executable" || true

      # Find the app: prefer APP_DIR, else auto-discover first *.app in repo
      - name: Find app bundle
        id: findapp
        run: |
          set -eo pipefail
          APP="${{ env.APP_DIR }}"
          if [ -d "$APP" ]; then
            echo "Using APP_DIR: $APP"
            echo "app=$APP" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "APP_DIR not found, auto-searching for .app..."
          APP_FOUND=$(find . -type d -name "*.app" | head -n 1 || true)
          if [ -z "$APP_FOUND" ]; then
            echo "No .app found in repository checkout."; exit 1
          fi
          echo "Found app at: $APP_FOUND"
          echo "app=$APP_FOUND" >> $GITHUB_OUTPUT

      - name: Install Qt (+ SerialPort)
        uses: jurplel/install-qt-action@v4
        with:
          version: "6.8.3"
          target: desktop
          modules: qtserialport
          cache: true

      - name: Ensure offscreen plugin is present (copy into app)
        run: |
          set -eo pipefail
          APP="${{ steps.findapp.outputs.app }}"
          DEST="$APP/Contents/PlugIns/platforms"
          mkdir -p "$DEST"
          PLUGDIR=""
          if command -v qtpaths >/dev/null 2>&1; then
            PLUGDIR="$(qtpaths --plugin-dir || true)"
          elif command -v qmake >/dev/null 2>&1; then
            PLUGDIR="$(qmake -query QT_INSTALL_PLUGINS || true)"
          fi
          PLUG=""
          [ -n "$PLUGDIR" ] && PLUG="$PLUGDIR/platforms/libqoffscreen.dylib"
          if [ ! -f "${PLUG:-/nonexistent}" ]; then
            PLUG="$(find "$RUNNER_TEMP" "$GITHUB_WORKSPACE/Qt" -maxdepth 6 -name 'libqoffscreen.dylib' 2>/dev/null | head -n1 || true)"
          fi
          if [ -n "$PLUG" ] && [ -f "$PLUG" ]; then
            cp -fv "$PLUG" "$DEST/"
            echo "Copied offscreen plugin from: $PLUG"
          else
            echo "WARNING: libqoffscreen.dylib not found; will still try with cocoa."
          fi

      - name: Headless --help (15s timeout) + diagnostics
        run: |
          set -eo pipefail
          LOG=runlog.txt
          APP="${{ steps.findapp.outputs.app }}"
          EXE=$(defaults read "$APP/Contents/Info" CFBundleExecutable 2>/dev/null || basename "$APP" .app)
          BIN="$APP/Contents/MacOS/$EXE"
          chmod +x "$BIN" || true

          echo "---- otool -L ----" | tee "$LOG"
          otool -L "$BIN" 2>&1 | tee -a "$LOG" || true

          export QT_QPA_PLATFORM=offscreen
          export QT_DEBUG_PLUGINS=1
          export QT_LOGGING_RULES="qt.serialport.*=true"

          echo "---- $EXE --help (15s timeout) ----" | tee -a "$LOG"
          python3 -c 'import subprocess,threading; p=subprocess.Popen(["'"$BIN"'","--help"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True); t=threading.Timer(15,p.kill); t.start(); out=p.communicate()[0]; print(out or "");' 2>&1 | tee -a "$LOG"

          echo "---- $EXE (headless, 20s timeout) ----" | tee -a "$LOG"
          python3 -c 'import subprocess,threading,time; start=time.time(); p=subprocess.Popen(["'"$BIN"'"], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True); t=threading.Timer(20,p.kill); t.start(); out=p.communicate()[0]; print(out or ""); print("TIMEOUT: app did not exit in 20s") if time.time()-start>=20 else None' 2>&1 | tee -a "$LOG"

      - name: Upload run log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macOS-headless-run-log
          path: runlog.txt
